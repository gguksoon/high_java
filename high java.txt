
===========================================[0530]===========================================

[a_collectionTest - basic - ArrayListTest.java]

[a_collectionTest - basic - ArrayListTest2.java]

[a_collectionTest - basic - VectorTest.java]





===========================================[0531]===========================================

[a_collectionTest - basic - ArrayListTest3.java]

[a_collectionTest - basic - StackQueueTest.java]

[a_collectionTest - basic - ListSortTest.java]

[a_collectionTest - basic - ListSortTest2.java]

[a_collectionTest - basic - StudentTest.java]





===========================================[0603]===========================================

[a_collectionTest - basic - SetTest.java]

[a_collectionTest - basic - SetTest2.java]

[a_collectionTest - basic - Equals_HashCodeTest.java]

[a_collectionTest - basic - BaseBallTest.java]

[a_collectionTest - basic - Lotto.java]





===========================================[0604]===========================================

[a_collectionTest - basic - MapTest.java]

[a_collectionTest - basic - PhoneBookTest.java]

[a_collectionTest - basic - Hotel.java]





===========================================[0605]===========================================

[a_collectionTest - basic - PropertiesTest.java]

[b_argumentTest - basic.argument - ArgsTest.java]

[b_argumentTest - basic.generic - GenericTest.java]

[b_argumentTest - basic.enumTest - EnumTest.java]





===========================================[0607]===========================================

[c_threadTest - basic - ThreadTest01.java]

[c_threadTest - basic - ThreadTest02.java]

[c_threadTest - basic - ThreadTest03.java]

[c_threadTest - basic - ThreadTest04.java]

[c_threadTest - basic - ThreadTest05.java]

[c_threadTest - basic - ThreadTest06.java]

[c_threadTest - basic - ThreadTest07.java]





===========================================[0610]===========================================

[c_threadTest - basic - ThreadTest08.java]

[c_threadTest - basic - ThreadTest09.java]

[c_threadTest - basic - ThreadTest10.java]

[c_threadTest - basic - ThreadTest11.java]

[c_threadTest - basic - ThreadTest12.java]





===========================================[0611]===========================================

[c_threadTest - basic - ThreadTest13.java]

[c_threadTest - basic - ThreadTest14.java]

[c_threadTest - basic - ThreadTest15.java]

[c_threadTest - basic - ThreadTest16.java]

[c_threadTest - basic - ThreadTest17.java]

[c_threadTest - basic - ThreadTest18.java]





===========================================[0612]===========================================

[c_threadTest - basic - ThreadTest19.java]

[c_threadTest - basic - ThreadTest20.java]

[d_IOTest - basic - FileTest01.java]

[d_IOTest - basic - FileTest02.java]





===========================================[0613]===========================================

1. 입출력(I/O)

   1) 입출력과 스트림
	- 입출력: 입력과 출력, 두 대상 간의 데이터를 주고 받는 것
	- 스트림(Stream): 데이터를 운반하는데 사용되는 연결통로
			단방향통신이며, 입출력을 동시에 수행하려면 2개의 스트림이 필요하다.

   2) 바이트기반 스트림 - InputStream, OutputStream
	- 데이터를 byte단위로 주고 받는다.

		[InputStream]				[OutputStream]
      (1) abstract int read()			abstract void write(int b)
	==> 입력스트림으로 부터 1byte를 읽어서 반환한다. 실패 시 -1을 반환
      (2) int read(byte[] b)			void write(byte[] b)
	==> 입력스트림으로부터 byte배열 b의 크기만큼 데이터를 읽어서 배열 b에 저장한다.
      (3) int read(byte[] b, int off, int len)	void write(byte[] b, int off, int len)
	==> 입력스트림으로부터 len개의 byte를 읽어서 byte배열 b의 off위치부터 저장한다.		

   3) 보조스트림 --> 주로 사용하는 4가지만
	- 스트림의 기능을 향상시키거나 새로운 기능을 추가하기 위해 사용
	- 독립적으로 입출력을 수행할 수 없다.

		[InputStream]			[OutputStream]
      (1) FilterInputStream		FilterOutputStream
	==> 필터를 이용한 입출력 처리

      (2) BufferedInputStream		BufferedOutputStream
	==> 버퍼를 이용한 입출력 성능 향상

      (3) DataInputStream		DataOutputStream
	==> int, float와 같은 기본형 단위(primitive type)로 데이터를 처리하는 기능

      (6) ObjectInputStream		ObjectOutputStream
	==> 데이터를 객체단위로 읽고 쓰는데 사용.
	==> 주로 파일을 이용하여 객체 직렬화와 관련있음

   4) 문자기반 스트림 - Reader, Writer
	- 입출력 단위가 문자(char, 2byte)인 스트림. 문자기반 스트림의 최고조상
	- InputStream  --> Reader
	- OutputStream --> Writer

2. 바이트기반 스트림

   1) InputStream과 OutputStream

      (1) InputStream의 메서드
	- int available()
	- void close()
	- void mark(int readlimit)
	- boolean markSupported()
	- abstract int read()
	- int read(byte[] b)
	- int read(byte[] b, int off, int len)
	- void reset()
	- long skip(long n)
 
      (2) OutputStream의 메서드
	- void close()
	- void flush(): 버퍼의 내용을 강제로 출력시킨다.   
	- abstract void write(int b)
	- void write(byte[] b)
	- void write(byte[] b, int off, int len)

[d_IOTest - basic - ByteArrayIOTest01.java]

[d_IOTest - basic - ByteArrayIOTest02.java]

[d_IOTest - basic - FileStreamTest01.java]

[d_IOTest - basic - FileStreamTest02.java]

[d_IOTest - basic - FileStreamTest03.java]

3. 바이트기반 보조스트림

   1) FilterInputStream과 FilterOutputStream
      - 모든 바이트기반 보조스트림의 최고조상
      - 보조스트림은 자체적으로 입출력을 수행할 수 없다.
      - 상속을 통해 FilterInputStream/FilterOutputStream의 read()와 write()를
	원하는 기능대로 오버라이딩해야 한다.

   2) BufferedInputStream과 BufferedOutputStream
      - 입출력 효율을 높이기 위해 버퍼(byte[])를 사용하는 보조스트림
      - 보조스트림을 닫으면 기반스트림도 닫힌다.

      (1) BufferedInputStream(InputStream in, int size)

      (2) BufferedInputStream(InputStream in)

      (3) BufferedOutputStream(OutputStream out, int size)

      (4) BufferedOutputtStream(OutputStream out)





===========================================[0614]===========================================

[d_IOTest - basic - BufferedIOTest01.java] --> 바이트 기반 버퍼

[d_IOTest - basic - BufferedIOTest02.java] --> 문자 기반 버퍼

[d_IOTest - basic - FileCopyTest.java] --> 버퍼 속도 비교

[d_IOTest - basic - FileStreamTest05.java]

[d_IOTest - basic - DataIOTest.java]

7. 직렬화(serialization)

   1) 직렬화
      - 객체를 '연속적인 데이터'로 변환하는 것. 반대과정은 '역직렬화'라고 한다.
      - 객체의 인스턴스변수들의 값을 일렬로 나열하는 것
      - 객체를 저장하기 위해서는 객체를 직렬화해야 한다.
      - 객체를 저장한다는 것은 객체의 모든 인스턴스변수의 값을 저장하는 것

   2) ObjectInputStream, ObjectOutputStream
      - 객체를 직렬화하여 입출력할 수 있게 해주는 보조스트림
	(1) ObjectInputStream(InputStream in)
	(2) ObjectOutputStream(OutputStream out)

      - 객체를 파일에 저장하는 방법
	FileOutputStream fos = new FileOutputStream("objectfile.ser");
	ObjectOutputStream out = new ObjectOutputStream(fos);

	out.writeObject(new UserInfo());

      - 파일에 저장된 객체를 다시 읽어오는 방법
	FileInputStream fis = new FileInputStream("objectfile.ser");
	ObjectInputStream in = new ObjectInputStream(fis);

	UserInfo info = (UserInfo)in.readObject();





===========================================[0615]===========================================

[d_IOTest - basic - ObjectStreamTest01.java]

[d_IOTest - basic - PhoneBookTest.java] --> 숙제





===========================================[0617]===========================================

[e_jdbcTest - basic - JdbcTest01.java]

JDBC(Java DataBase Connectivity)

- 작업 순서
   0. 현재 프로젝트에 해당 DB의 JDBC드라이버 라이브러리를 등록해 놓는다.
	(Build Path에 등록한다.)
	자바프로젝트 우클릭 => Build Path => Configure Build Path => Libraries =>
	Add External JARs => E:\C_Lib\ibatis에 있는 ojdbc6.jar 열기

   1. 드라이버 로딩 ==> JDBC드라이버를 메모리에 적재
	Class.forName("oracle.jdbc.driver.OracleDriver");

   2. 해당 DB시스템에 접속하기 ==> 접속이 성공되면 Connection객체가 생성된다.
	DriverManager.getConnection()메서드를 이용한다.

   3. 질의 작업 ==> SQL명령을 실행한다.
	Statement객체 또는 PreparedStatement객체를 이용하여 SQL문장을 실행한다.
	(Statement, PreparedStatement는 Connection객체를 이용하여 생성한다.)
 
   4. 질의 결과를 받아서 처리한다.
	1) SQL문이 select일 경우 ==> ResultSet객체가 만들어진다.
		- ResultSet객체에는 select문을 실행한 결과가 저장된다.
	2) SQL문이 insert, update, delete등 일 경우 ==> 정수값이 반환된다.
		- 정수값은 보통 실행에 성공한 레코드 수를 의미한다.

   5. 자원 정리 ==> 사용했던 객체들을 모두 닫아준다.

[e_jdbcTest - basic - JdbcTest02.java] --> 문제

[e_jdbcTest - basic - JdbcTest03.java]

- SQL Developer를 이용하여 Bankinfo테이블을 생성했음. --> 190617
	create table Bankinfo(
		bank_no varchar2(40) not null, --> 계좌번호
		bank_name varchar2(40) not null, --> 은행이름
		bank_user_name varchar2(30) not null, --> 예금주 이름
		bank_date date, --> 처리날짜
	
		constraint pk_bank_info primary key(bank_no)
	);





===========================================[0618]===========================================

[e_jdbcTest - basic - JdbcTest03.java] --> PreparedStatement객체 이용 추가

[e_jdbcTest - basic - JdbcTest04.java] --> 문제(LPROD 테이블에 새로운 데이터 추가하기)

[e_jdbcTest - util - DBUtill.java] --> JDBC드라이버 로딩 (앞으로 사용할 것) -- ★★★

- SQL Developer를 이용하여 MYMEMBER테이블을 생성했음

[e_jdbcTest - basic - JdbcTest05.java] --> 문제(회원정보관리 프로그램)

- 숙제: mvc패턴과 싱글턴 패턴에 대해 조사해서 레포트 제출





===========================================[0619]===========================================

[e_jdbcTest - res - db.properties] --> db정보 입력

[e_jdbcTest - util - DBUtil2.java] --> db.properties를 이용해 객체만들기(Properties객체 이용)

[e_jdbcTest - util - DBUtil3.java] --> db.properties를 이용해 객체만들기(ResourceBundle객체 이용)

[e_jdbcTest - basic - JdbcTest05.java] --> 위 내용들 만들고 memPrintAll()인 4번에서 테스트함

[f_JavaDocTest - basik - JavaDocTest.java]

패키지 우클릭 -> Export -> next -> 경로그대로.. -> next -> next -> 
VM options에 -charset utf-8 -encoding utf-8 입력 -> 폴더생성.. Yes To All
해당 패키지에 doc이란 폴더가 생김 -> index파일 실행해보면 doc읽ㄱㄹ을수있음





===========================================[0620]===========================================

[e_jdbcTest - mvc] --> mvc 만들기

[e_jdbcTest - singleton - MySingleton.java] --> 싱글톤

[e_jdbcTest - singleton - SingleTonTest] --> 싱글톤 예제

- SQL Developer를 이용하여 jdbc_board테이블을 생성했음

[e_jdbcTest - board] --> 게시판만들기 숙제





===========================================[0621]===========================================

[e_jdbcTest - board] --> 게시판만들기 숙제 풀이

[staruml 설치]
next -> agree후 next -> 경로후next -> next -> icon체크후next -> install 

ppt는 클래스다이어그램

- staruml은 복잡한 클래스를 그림으로 나타낸다.

사용법
좌측의 클래스 클릭 -> 창에 놓기
클래스는 아래처럼 3칸으로 나뉨 

--------	----------------
클래스명    --> Test
--------	----------------
멤버변수	name: String	==> +name으로 나오는데, Public을 의미(-는 Private, #은 Protected)
--------	----------------	--> static은 밑줄인데 staruml은 없어서 name: String (static)으로 표현
메서드		
--------	----------------

- Generalization(일반화 관계): 상속받은 것(화살표가 실선임, 화살표가 뾰족한곳이 상위계층)
	-----▷ 모양

- Realization(실체화 관계): 인터페이스 구현한 것(화살표가 점선임)
	- - -▷ 모양

- Association(연관 관계): 한 개체가 다른 객체를 소유하거나 파라미터로 객체를 받아서
				처리하는 관계
	단방향: ------>   양방향: ------

- Aggregation(집합): 메인 클래스가 삭제될 시 대상 클래스는 같이 삭제가 안됨
			(독립적 동작, 약한 결합)
	마우스 -----◇ 컴퓨터

- Composition(합성): 메인 클래스가 삭제될 시 대상 클래스도 같이 삭제가 됨(강한 결합)
	-----◆ 모양

- Dependency(의존 관계): 한 객체가 다른 객체를 소유하진 않지만, 
				다른 객체의 변경에 따라 같이 변경된다.
		- - - -> 모양



- 인터페이스 만들 때 일치하면 동그라미를 쓰면 되지만 이렇게 하는 것 보다
	일반 클래스를 만들고 해당 클래스를 선택한 다음
	우측하단의 Stereotype에 interface를 기입한다.
	
- 패키지를 구현하고 싶으면 클래스명 앞에 .으로 구분하여 기입한다.

http://www.nextree.co.kr/p6753/





===========================================[0624]===========================================

[g_iBatisTest]

프로젝트 우클릭 후 Build Path => Configure Build Path => Libraries => Add External JARs
	=> E:\C_Lib\ibatis에 있는 "ibatis-2.3.4.726.jar", "ojdbc6.jar"  열기
				    - 아이바티스와 jdbc

아이바티스: DB연결작업, xml문서에 실행할 쿼리문을 만들어놓고 불러옴

[g_iBatisTest - res - sqlMapConfig.properties] -> driver/url/user/pass 저장

[g_iBatisTest - res - sqlMapConfig.xml] -> Source클릭





===========================================[0625]===========================================

[환경변수 JDK1.8로 변경]

cmd창에 java -version ==> 1.7 확인

window + pause ==> 고급 시스템 설정 -> 환경변수 
	-> JAVA_HOME을 jdk1.8로
	-> Path에 JAVA_HOME을 위(맨앞)로

cmd창에 java -version ==> 1.8 확인



[이클립스 JRE1.8 설정]

Window -> preferences -> Installed JREs -> Add -> Standard VM -> 1.8경로 지정



[e(fx)clipse 설치]

Help -> Eclipse Marketplace -> Fine에 'e(fx)clipse' 검색 -> 3.5.0 Install

-> 라이센스 동의 후 Finish -> 우측하단에 인스톨 확인 

* e(fx)clipse는 인터넷에 연결되어 있을 때 사용할 수 있다.


[Scene Builder] --> SceneBuilder-8.5.0.exe

https://gluonhq.com/products/scene-builder/ 에 접속하여 하단에 있는

Download Scene Builder for Java 8 -> Scene Builder / Windows Installer 64-bit 설치

--> 경로 복사해놓고 설치하기 (학원컴: C:\Users\PC-15\AppData\Local\SceneBuilder)

--> 이클립스 -> 윈도우 -> 프리퍼런스 -> JavaFX -> SceneBuilder executeable에 위 경로 적기

-> SceneBuilder.exe선택 후 확인



[JavaFX 프로젝트 생성]

프로젝트 할때 Java Project로 만들지 말고.. 

Ctrl + N -> JavaFX Project로 만들것.

--> 프로젝트 만든다음 Main.java에 있는 start()메서드 안에 구현하면 됨



[JavaFX]

Java의 GUI 프로그램 발전 순서
	AWT ==> SWing ==> javaFx
		
window창 ==> Stage객체
	
창에 나타나는 내용들 ==> Scene객체
	
객체들을 포함할 수 있는 것 ==> 컨테이너 객체 ==> 화면의 레이아웃을 담당하는 객체
	
컨트롤 객체 ==> 버튼, 콤보박스, 리스트박스, Label 등...





===========================================[0626]===========================================

[i_javaFxTest - basic - JavaFxLifeCycle.java]

- Java의 GUI 프로그램 발전 순서
   AWT ==> SWing ==> javaFx
	
- window창 ==> Stage객체
	
- 창에 나타나는 내용들 ==> Scene객체
	
- 객체들을 포함할 수 있는 것 ==> 컨테이너 객체 ==> 화면의 레이아웃을 담당하는 객체
	
- 컨트롤 객체 ==> 버튼, 콤보박스, 리스트박스, Label 등...
	
- javaFx프로그램의 실행 순서
   main() --> launch() --> 현재 객체의 생성자 호출(여기선 JavaFxLifeCycle)
   --> init() --> start() --> 사용 --> 종료 --> stop()
   * init()은 환경설정하는 메서드
	
- javaFx가 종료되는 경우
   1) 마지막 윈도우(Stage)가 닫힐 때
   2) 마지막 윈도우의 close()메서드가 호출될 때
   3) 자바코드의 Platform.exit()메서드를 호출 했을 때
   4) 자바코드의 System.exit(0)메서드를 호출 했을 때
	* 1) ~ 3) 은 수행 후 stop()을 호출하고
	* 4)는 stop()을 호출하지 않는다.



[i_javaFxTest - basic - ProgramLayout.java] --> 레이아웃 기본



[i_javaFxTest - FxmlLayout.fxml] --> SceneBuilder 이용

[i_javaFxTest - basic - JavaFxLifeCycle.java] --> FxmlLayout.fxml을 불러오기



[i_javaFxTest - basic - FlowPaneTest.java] --> FlowPane 예제



[i_javaFxTest - basic - AnchorPaneTest.java] --> AnchorPane 예제



[i_javaFxTest - basic - GridPaneTest.java] --> GridPane / Style 예제

- css사이트
    > https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html





===========================================[0627]===========================================

[i_javaFxTest - basic.event - EventTest.java] --> 이벤트 예제



[i_javaFxTest - basic.event - FxmlEventTest.fxml] --> (fxml)

[i_javaFxTest - basic.event - FxmlEventTestController.java] --> (클래스)fxml이름 뒤에 Controller붙이기

[i_javaFxTest - basic.event - FxmlEventTest.java] --> (main)fxml파일과 이름 같게

- 씬빌더를 사용해 구상하고, id(변수명)을 기입하고 좌측 하단의컨트롤러의 경로지정해준다.
   (ex: basic.event.FxmlEventTestController)

- 씬빌더 - View - Show Sample Controller Skeleton - Full 체크 후 카피
     - FxmlEventTestController.java의 내용을 모두 지우고 붙여넣기



[i_javaFxTes - basic.event_gugudan] --> 구구단 문제



[i_javaFxTes - basic.control - CheckBoxTest.java] --> 이미지





===========================================[0628]===========================================

[i_javaFxTes - basic.control - RadioButtonTest.java] --> ToggleGroup



[i_javaFxTes - basic.control - ListViewTest.java]





===========================================[0701]===========================================

[i_javaFxTest - basic.control - ComboBoxTest.java] 



[i_javaFxTest - basic.control - ComboBoxTest2.java] --> 리스트 이용한 콤보박스



[i_javaFxTest - basic.control - AlertTest.java]





===========================================[0702]===========================================


[i_javaFxTest - basic.control - TableTest.java] --> 테이블 뷰



[i_javaFxTest - basic.mvc] --> 과제(멤버)





===========================================[0703]===========================================


main

dao
vo
service

ibatis -> 쿼리문 저장

view --> fxml 파일 저장





===========================================[0704]===========================================

[i_javaFxTest - basic.dialog - DialogTest.java] --> dialog는 창

[i_javaFxTest - basic.menu - MenuTest.java]





===========================================[0705]===========================================

[i_javaFxTest - basic.menu]  --> 메모장 구현



[i_javaFxTest - basic.thread] --> 쓰레드 구현 + 메서드 활용한 setOnAction + SimpleDateFormat
   void initialize() {
        btnStart.setOnAction(e -> { // 방법1
		// 방법1 구현부        	
        });
        
        btnStop.setOnAction(e -> handleBtnStop(e)); // 방법2
    }

    private void handleBtnStop(ActionEvent evt) { // 방법2에 구현한 메서드
	// 방법2 구현부    	
    }



[i_javaFxTest - basic.pagination - TablePaginationTest.java] --> 페이지 n개씩 보여주지



[i_javaFxTest - basic.chart - BarChartTest.java] -->  차트





===========================================[0708]===========================================

[i_javaFxTest - student] --> 미완성



[i_javaFxTest - basic.animation] --> 애니메이션





===========================================[0709]===========================================

[j_javaNetwork - basic - InetAdressTest.java] --> 네이버 IP 정보 가져오기

[j_javaNetwork - basic - URLTest.java] --> ddit의 자원에 접근

[j_javaNetwork - basic - URLTest2.java] --> 해당 호스트의 페이지 내용 가져오기 

---------------------------------------------------------

[j_javaNetwork - basic.tcp - TcpServer01.java]

[j_javaNetwork - basic.tcp - TcpClient01.java]

 ==> E:\A_TeachingMaterial\3.HighJava\workspace\j_javaNetwork\bin 에서 cmd를 실행
		(해당 경로로 가서 주소창에 cmd를 치면 해당 경로로 cmd창이 열린다.)
 ==> java basic.tcp.TcpServer01
 ==> java basic.tcp.TcpClient01

---------------------------------------------------------

[j_javaNetwork - basic.tcp - Sender.java]

[j_javaNetwork - basic.tcp - Receiver.java]

[j_javaNetwork - basic.tcp - TcpServer02.java]

[j_javaNetwork - basic.tcp - TcpClient02.java]

 ==> E:\A_TeachingMaterial\3.HighJava\workspace\j_javaNetwork\bin 에서 cmd를 실행
		(해당 경로로 가서 주소창에 cmd를 치면 해당 경로로 cmd창이 열린다.)
 ==> java basic.tcp.TcpServer02
 ==> java basic.tcp.TcpClient02

---------------------------------------------------------

[j_javaNetwork - basic.tcp - MultiChatServer.java]

[j_javaNetwork - basic.tcp - MultiChatClient.java]

---------------------------------------------------------

[j_javaNetwork - basic.udp - UDPServer.java]

[j_javaNetwork - basic.udp - UDPClient.java]





===========================================[0710]===========================================

[k_javaRmiClient] --> RMI 클라이언트

[k_javaRmiServerTest] --> RMI 서버

 ==> 서버를 만들고 vo와 inf를 클라이언트에 복사함.

---------------------------------------------------------

[l_javaRmiChatServer]

[l_javaRmiChatClient]





===========================================[0711]===========================================

- 클라이언트: 자바FX화면구성, 공유된서비스 호출

- 서버: 자바FX를 굳이 쓸 필요없음, 서비스들 등록, RMI서버 작동

-----------------------------------------------------------------

[m_javaFXZipSearchServer] --> 서버 / 자바프로젝트

[m_javaFXZipSearchClient] --> 클라이언트 / 자바FX프로젝트
	--> 라이브러리 추가(Add External JARs) --> ibatis, ojdbc6, log4j 

 ==> 서버구현 뒤에 서버의 vo와 서비스인터페이스들만 복사해서 클라이언트에 넣어줌

- log4는 DB 진행상황을 콘솔창에 출력해줌

------------------------------------------------------------------

SVN.. 소스코드 관리 프로그램

플러그인 설치..

help -> eclipse marketplace -> subclipse 검색(Subclipse 4.3.0) -> Install

	-> 모두체크 후 Confirm -> 라이센스 동의 -> 설치진행

	-> Warning: You are installing software that contains unsigned content..
		위 경고가 뜨면 Install anyway 클릭

	-> Restart -> 끝



window -> perspactive -> open perspective -> other -> SVN Repository Exploring 선택후 open



SVN Repositories 우클릭 - new - repositoriy location ->
주소 입력(https://SEM-PC/svn/team2/) -> finish
난.. b002 / java

공유방법
프로젝트 우클릭 -> Team -> Share Project -> SVN -> NEXT -> 로그인한 포지터리 선택후 next ->
기본값으로 finish
공유되면 프로젝트 우클릭 -> team -> 맨 위의 synchronize with repo.. 클릭

svn탭에서 프로젝트 우클릭 -> 커밋

체크아웃 -> 서버에 있는것 다 가져오기



AA : 패키지 구조 만듬(혹은 PL) 그 후 공유받음




























































































